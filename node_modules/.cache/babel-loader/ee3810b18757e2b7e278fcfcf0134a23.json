{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ameen\\\\git\\\\techfuture\\\\src\\\\componenets\\\\RaceChart.js\";\nimport ChartRace from 'react-chart-race';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RaceChart extends Component {\n  constructor(props) {\n    super(props);\n    var years = Object.keys(this.props.data);\n    this.state = {\n      data: [],\n      year: \"\",\n      min: parseInt(years[0]),\n      max: parseInt(years[years.length - 1])\n    };\n    console.log(this.state.min, this.state.max);\n    this.handleChange();\n    var date = 2000;\n    setInterval(() => {\n      if (date <= 2021) {\n        this.setState({\n          year: date\n        });\n        date = date + 1;\n        this.handleChange();\n      }\n    }, 2000);\n  }\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  handleChange() {\n    const data = [{\n      id: 0,\n      title: 'Mathematical software',\n      value: this.getRandomInt(10, 90),\n      color: \"rgb(123,22,200)\"\n    }, {\n      id: 1,\n      title: 'Document management and text processing',\n      value: 38,\n      color: '#3fc42d'\n    }, {\n      id: 2,\n      title: 'Software organization and properties',\n      value: this.getRandomInt(10, 90),\n      color: '#c33178'\n    }, {\n      id: 3,\n      title: 'Computer graphics',\n      value: this.getRandomInt(10, 90),\n      color: '#423bce'\n    }, {\n      id: 4,\n      title: 'Software creation and management',\n      value: 58,\n      color: '#c8303b'\n    }, {\n      id: 5,\n      title: 'Communication hardware',\n      value: 16,\n      color: '#2c2c2c'\n    }, {\n      id: 6,\n      title: 'Organizations',\n      value: this.getRandomInt(10, 90),\n      color: '#423bcf'\n    }];\n    this.setState({\n      data\n    });\n  } // componentDidMount()\n  // {\n  //     let i=this.state.min\n  //     setInterval(() => {\n  //         if(i<=this.state.max)\n  //         {\n  //             console.log(this.props.data[i.toString()])\n  //             this.setState({ data: this.props.data[i],\n  //                 year: i});\n  //                 i=i+1\n  //         }\n  //       }, 1000);\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col fixed-top\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"float-end mt-5 pt-5\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: this.state.year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ChartRace, {\n          data: this.state.data,\n          backgroundColor: \"white\",\n          width: 760,\n          padding: 12,\n          itemHeight: 58,\n          gap: 12,\n          titleStyle: {\n            font: 'normal 400 13px Arial',\n            color: '#000'\n          },\n          valueStyle: {\n            font: 'normal 400 11px Arial',\n            color: '#000'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ameen/git/techfuture/src/componenets/RaceChart.js"],"names":["ChartRace","React","Component","RaceChart","constructor","props","years","Object","keys","data","state","year","min","parseInt","max","length","console","log","handleChange","date","setInterval","setState","getRandomInt","Math","ceil","floor","random","id","title","value","color","render","font"],"mappings":"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","sourcesContent":["import ChartRace from 'react-chart-race';\r\nimport React, { Component } from 'react';\r\n\r\n\r\nexport default class RaceChart extends Component{\r\n \r\n    constructor(props){\r\n      super(props);\r\n      var years=Object.keys(this.props.data)\r\n      this.state = {\r\n        data: [],\r\n        year: \"\",\r\n        min: parseInt(years[0]),\r\n        max: parseInt(years[years.length-1])\r\n      };\r\n      console.log(this.state.min,this.state.max)\r\n      this.handleChange();\r\n      var date = 2000\r\n        setInterval(() => {\r\n            if(date <= 2021)\r\n            {\r\n                this.setState({ year: date})\r\n                date =date+1\r\n                this.handleChange();\r\n            }\r\n        }, 2000);\r\n    }\r\n   \r\n     getRandomInt(min, max){\r\n       min = Math.ceil(min);\r\n       max = Math.floor(max);\r\n       return Math.floor(Math.random() * (max - min + 1)) + min;\r\n     }\r\n   \r\n     handleChange(){\r\n       const data = [\r\n         { id: 0, title: 'Mathematical software', value: this.getRandomInt(10, 90), color: \"rgb(123,22,200)\" },\r\n         { id: 1, title: 'Document management and text processing', value: 38, color: '#3fc42d' },\r\n         { id: 2, title: 'Software organization and properties', value: this.getRandomInt(10, 90), color: '#c33178' },\r\n         { id: 3, title: 'Computer graphics', value: this.getRandomInt(10, 90), color: '#423bce' },\r\n         { id: 4, title: 'Software creation and management', value: 58, color: '#c8303b' },\r\n         { id: 5, title: 'Communication hardware', value: 16, color: '#2c2c2c' },\r\n         { id: 6, title: 'Organizations', value: this.getRandomInt(10, 90), color: '#423bcf' }\r\n       ];\r\n       this.setState({ data });\r\n    }\r\n   \r\n    // componentDidMount()\r\n    // {\r\n    //     let i=this.state.min\r\n    //     setInterval(() => {\r\n    //         if(i<=this.state.max)\r\n    //         {\r\n    //             console.log(this.props.data[i.toString()])\r\n    //             this.setState({ data: this.props.data[i],\r\n    //                 year: i});\r\n    //                 i=i+1\r\n    //         }\r\n    //       }, 1000);\r\n    // }\r\n\r\n\r\n    render(){\r\n      return(\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col fixed-top\">\r\n                <div className=\"float-end mt-5 pt-5\">\r\n                    <h2>{this.state.year}</h2>\r\n                </div>\r\n                </div>\r\n                <ChartRace\r\n                    data={this.state.data}\r\n                    backgroundColor='white'\r\n                    width={760}\r\n                    padding={12}\r\n                    itemHeight={58}\r\n                    gap={12}\r\n                    titleStyle={{ font: 'normal 400 13px Arial', color: '#000' }}\r\n                    valueStyle={{ font: 'normal 400 11px Arial', color: '#000' }}\r\n                />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n   \r\n  }"]},"metadata":{},"sourceType":"module"}